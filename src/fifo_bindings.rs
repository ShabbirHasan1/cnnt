/* automatically generated by rust-bindgen 0.59.2 */
#![allow(warnings)]

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}

impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}

impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 34;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 64;
pub const UINT_FAST16_WIDTH: u32 = 64;
pub const INT_FAST32_WIDTH: u32 = 64;
pub const UINT_FAST32_WIDTH: u32 = 64;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 64;
pub const UINTPTR_WIDTH: u32 = 64;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 64;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 64;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const INSTRUMENT_ID_LEN: u32 = 27;
pub const PRICE_LEVEL_MAX: u32 = 5;
pub const SNAP_DATE_LEN: u32 = 8;
pub const SNAP_TIME_LEN: u32 = 8;
pub const MQ_ITEMS: u32 = 8192;
pub const HFP_ITEMS: u32 = 4096;
pub const MQ_SIZE: u32 = 256;

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}

#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(__fsid_t),
        "::",
        stringify!(__val)
        )
    );
}

pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct price_list {
    pub price: f64,
    pub volume: ::std::os::raw::c_uint,
}

#[test]
fn bindgen_test_layout_price_list() {
    assert_eq!(
        ::std::mem::size_of::<price_list>(),
        12usize,
        concat!("Size of: ", stringify!(price_list))
    );
    assert_eq!(
        ::std::mem::align_of::<price_list>(),
        1usize,
        concat!("Alignment of ", stringify!(price_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<price_list>())).price as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(price_list),
        "::",
        stringify!(price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<price_list>())).volume as *const _ as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(price_list),
        "::",
        stringify!(volume)
        )
    );
}

pub type prc_lst_s = price_list;

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct market_send {
    pub instrument_id: [::std::os::raw::c_char; 32usize],
    pub instrument_no: ::std::os::raw::c_uint,
    pub topic_id: ::std::os::raw::c_ushort,
    pub reserved1: ::std::os::raw::c_ushort,
    pub volume_multiple: ::std::os::raw::c_uint,
    pub reserved2: ::std::os::raw::c_uint,
    pub snap_date: [::std::os::raw::c_char; 9usize],
    pub reserved3: [::std::os::raw::c_char; 7usize],
    pub snap_time: u32,
    pub reserved4: [::std::os::raw::c_char; 8usize],
    pub snap_no: ::std::os::raw::c_uint,
    pub packet_no: ::std::os::raw::c_uint,
    pub snap_millisec: ::std::os::raw::c_ushort,
    pub ip_len: ::std::os::raw::c_ushort,
    pub reserved5: ::std::os::raw::c_uint,
    pub reserved6: ::std::os::raw::c_uint,
    pub bid_price_list: [prc_lst_s; 5usize],
    pub reserved7: ::std::os::raw::c_uint,
    pub ask_price_list: [prc_lst_s; 5usize],
    pub reserved8: ::std::os::raw::c_uint,
    pub last_price: f64,
    pub turnover: f64,
    pub open_interest: f64,
    pub volume: ::std::os::raw::c_uint,
    pub change_no: ::std::os::raw::c_uint,
}

#[test]
fn bindgen_test_layout_market_send() {
    assert_eq!(
        ::std::mem::size_of::<market_send>(),
        256usize,
        concat!("Size of: ", stringify!(market_send))
    );
    assert_eq!(
        ::std::mem::align_of::<market_send>(),
        1usize,
        concat!("Alignment of ", stringify!(market_send))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).instrument_id as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(instrument_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).instrument_no as *const _ as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(instrument_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).topic_id as *const _ as usize },
        36usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(topic_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved1 as *const _ as usize },
        38usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).volume_multiple as *const _ as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(volume_multiple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved2 as *const _ as usize },
        44usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).snap_date as *const _ as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(snap_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved3 as *const _ as usize },
        57usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).snap_time as *const _ as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(snap_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved4 as *const _ as usize },
        68usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).snap_no as *const _ as usize },
        76usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(snap_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).packet_no as *const _ as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(packet_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).snap_millisec as *const _ as usize },
        84usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(snap_millisec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).ip_len as *const _ as usize },
        86usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(ip_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved5 as *const _ as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved6 as *const _ as usize },
        92usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved6)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).bid_price_list as *const _ as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(bid_price_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved7 as *const _ as usize },
        156usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved7)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).ask_price_list as *const _ as usize },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(ask_price_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).reserved8 as *const _ as usize },
        220usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(reserved8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).last_price as *const _ as usize },
        224usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).turnover as *const _ as usize },
        232usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).open_interest as *const _ as usize },
        240usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(open_interest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).volume as *const _ as usize },
        248usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<market_send>())).change_no as *const _ as usize },
        252usize,
        concat!(
        "Offset of field: ",
        stringify!(market_send),
        "::",
        stringify!(change_no)
        )
    );
}

pub type mkt_snd_s = market_send;

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct struct_snap_market {
    pub change_no: ::std::os::raw::c_uint,
    pub instrument_no: ::std::os::raw::c_uint,
    pub instrument_id: [::std::os::raw::c_char; 27usize],
    pub topic_id: ::std::os::raw::c_ushort,
    pub snap_no: ::std::os::raw::c_uint,
    pub snap_date: [::std::os::raw::c_char; 9usize],
    pub snap_time: [::std::os::raw::c_char; 9usize],
    pub snap_millisec: ::std::os::raw::c_ushort,
    pub packet_no: ::std::os::raw::c_uint,
    pub volume_multiple: ::std::os::raw::c_uint,
    pub price_tick: f64,
    pub codec_price: f64,
    pub last_price: f64,
    pub volume: ::std::os::raw::c_uint,
    pub turnover: f64,
    pub open_interest: f64,
    pub bid_price_list: [prc_lst_s; 5usize],
    pub ask_price_list: [prc_lst_s; 5usize],
}

#[test]
fn bindgen_test_layout_struct_snap_market() {
    assert_eq!(
        ::std::mem::size_of::<struct_snap_market>(),
        233usize,
        concat!("Size of: ", stringify!(struct_snap_market))
    );
    assert_eq!(
        ::std::mem::align_of::<struct_snap_market>(),
        1usize,
        concat!("Alignment of ", stringify!(struct_snap_market))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).change_no as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(change_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).instrument_no as *const _ as usize
        },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(instrument_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).instrument_id as *const _ as usize
        },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(instrument_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).topic_id as *const _ as usize },
        35usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(topic_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).snap_no as *const _ as usize },
        37usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(snap_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).snap_date as *const _ as usize },
        41usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(snap_date)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).snap_time as *const _ as usize },
        50usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(snap_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).snap_millisec as *const _ as usize
        },
        59usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(snap_millisec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).packet_no as *const _ as usize },
        61usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(packet_no)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).volume_multiple as *const _ as usize
        },
        65usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(volume_multiple)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).price_tick as *const _ as usize },
        69usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).codec_price as *const _ as usize },
        77usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(codec_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).last_price as *const _ as usize },
        85usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).volume as *const _ as usize },
        93usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<struct_snap_market>())).turnover as *const _ as usize },
        97usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).open_interest as *const _ as usize
        },
        105usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(open_interest)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).bid_price_list as *const _ as usize
        },
        113usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(bid_price_list)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<struct_snap_market>())).ask_price_list as *const _ as usize
        },
        173usize,
        concat!(
        "Offset of field: ",
        stringify!(struct_snap_market),
        "::",
        stringify!(ask_price_list)
        )
    );
}

pub type snap_market_s = struct_snap_market;

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Eth_Frame_Header {
    pub destination: [u8; 6usize],
    pub source: [u8; 6usize],
    pub frame_type: u16,
}

#[test]
fn bindgen_test_layout_Eth_Frame_Header() {
    assert_eq!(
        ::std::mem::size_of::<Eth_Frame_Header>(),
        14usize,
        concat!("Size of: ", stringify!(Eth_Frame_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<Eth_Frame_Header>(),
        1usize,
        concat!("Alignment of ", stringify!(Eth_Frame_Header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Eth_Frame_Header>())).destination as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(Eth_Frame_Header),
        "::",
        stringify!(destination)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Eth_Frame_Header>())).source as *const _ as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(Eth_Frame_Header),
        "::",
        stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Eth_Frame_Header>())).frame_type as *const _ as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(Eth_Frame_Header),
        "::",
        stringify!(frame_type)
        )
    );
}

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct IP_Frame_Header {
    pub flag: u8,
    pub tos: u8,
    pub total_len: u16,
    pub identification: u16,
    pub fragment_offset: u16,
    pub ttl: u8,
    pub protocol: u8,
    pub hdr_chk_sum: u16,
    pub source_address: u32,
    pub destination_address: u32,
}

#[test]
fn bindgen_test_layout_IP_Frame_Header() {
    assert_eq!(
        ::std::mem::size_of::<IP_Frame_Header>(),
        20usize,
        concat!("Size of: ", stringify!(IP_Frame_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<IP_Frame_Header>(),
        1usize,
        concat!("Alignment of ", stringify!(IP_Frame_Header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).flag as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).tos as *const _ as usize },
        1usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(tos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).total_len as *const _ as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(total_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).identification as *const _ as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(identification)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).fragment_offset as *const _ as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(fragment_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).ttl as *const _ as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(ttl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).protocol as *const _ as usize },
        9usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).hdr_chk_sum as *const _ as usize },
        10usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(hdr_chk_sum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<IP_Frame_Header>())).source_address as *const _ as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(source_address)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<IP_Frame_Header>())).destination_address as *const _ as usize
        },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(IP_Frame_Header),
        "::",
        stringify!(destination_address)
        )
    );
}

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct UDP_Frame_Header {
    pub source_port: u16,
    pub destination_port: u16,
    pub length: u16,
    pub chk_sum: u16,
}

#[test]
fn bindgen_test_layout_UDP_Frame_Header() {
    assert_eq!(
        ::std::mem::size_of::<UDP_Frame_Header>(),
        8usize,
        concat!("Size of: ", stringify!(UDP_Frame_Header))
    );
    assert_eq!(
        ::std::mem::align_of::<UDP_Frame_Header>(),
        1usize,
        concat!("Alignment of ", stringify!(UDP_Frame_Header))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_Frame_Header>())).source_port as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(UDP_Frame_Header),
        "::",
        stringify!(source_port)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<UDP_Frame_Header>())).destination_port as *const _ as usize
        },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(UDP_Frame_Header),
        "::",
        stringify!(destination_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_Frame_Header>())).length as *const _ as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(UDP_Frame_Header),
        "::",
        stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<UDP_Frame_Header>())).chk_sum as *const _ as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(UDP_Frame_Header),
        "::",
        stringify!(chk_sum)
        )
    );
}

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct BoostArguments {
    pub dump_packets: u32,
    pub need_crc: bool,
    pub print_heartbeat: bool,
    pub dump_to_pcap: bool,
    pub subscription_init: ::std::os::raw::c_int,
    pub dump_on_exit: bool,
    pub debug_log: bool,
    pub load_init: bool,
    pub output_stats: bool,
    pub dump_mdqp_csv: bool,
    pub no_mdqp_validation: bool,
}

#[test]
fn bindgen_test_layout_BoostArguments() {
    assert_eq!(
        ::std::mem::size_of::<BoostArguments>(),
        17usize,
        concat!("Size of: ", stringify!(BoostArguments))
    );
    assert_eq!(
        ::std::mem::align_of::<BoostArguments>(),
        1usize,
        concat!("Alignment of ", stringify!(BoostArguments))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).dump_packets as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(dump_packets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).need_crc as *const _ as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(need_crc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).print_heartbeat as *const _ as usize },
        5usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(print_heartbeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).dump_to_pcap as *const _ as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(dump_to_pcap)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BoostArguments>())).subscription_init as *const _ as usize
        },
        7usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(subscription_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).dump_on_exit as *const _ as usize },
        11usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(dump_on_exit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).debug_log as *const _ as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(debug_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).load_init as *const _ as usize },
        13usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(load_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).output_stats as *const _ as usize },
        14usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(output_stats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BoostArguments>())).dump_mdqp_csv as *const _ as usize },
        15usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(dump_mdqp_csv)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BoostArguments>())).no_mdqp_validation as *const _ as usize
        },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(BoostArguments),
        "::",
        stringify!(no_mdqp_validation)
        )
    );
}

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Struct_HFP_Ext {
    pub codec_price: f64,
    pub price_tick: f64,
    pub HighestPrice: f64,
    pub LowestPrice: f64,
    pub OpenPrice: f64,
    pub ClosePrice: f64,
    pub SettlementPrice: f64,
    pub UpperLimitPrice: f64,
    pub LowerLimitPrice: f64,
    pub PreSettlementPrice: f64,
    pub PreClosePrice: f64,
    pub PreOpenInterest: f64,
    pub PreDelta: f64,
    pub CurrDelta: f64,
}

#[test]
fn bindgen_test_layout_Struct_HFP_Ext() {
    assert_eq!(
        ::std::mem::size_of::<Struct_HFP_Ext>(),
        112usize,
        concat!("Size of: ", stringify!(Struct_HFP_Ext))
    );
    assert_eq!(
        ::std::mem::align_of::<Struct_HFP_Ext>(),
        1usize,
        concat!("Alignment of ", stringify!(Struct_HFP_Ext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).codec_price as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(codec_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).price_tick as *const _ as usize },
        8usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(price_tick)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).HighestPrice as *const _ as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(HighestPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).LowestPrice as *const _ as usize },
        24usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(LowestPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).OpenPrice as *const _ as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(OpenPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).ClosePrice as *const _ as usize },
        40usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(ClosePrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).SettlementPrice as *const _ as usize },
        48usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(SettlementPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).UpperLimitPrice as *const _ as usize },
        56usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(UpperLimitPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).LowerLimitPrice as *const _ as usize },
        64usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(LowerLimitPrice)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Struct_HFP_Ext>())).PreSettlementPrice as *const _ as usize
        },
        72usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(PreSettlementPrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).PreClosePrice as *const _ as usize },
        80usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(PreClosePrice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).PreOpenInterest as *const _ as usize },
        88usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(PreOpenInterest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).PreDelta as *const _ as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(PreDelta)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_HFP_Ext>())).CurrDelta as *const _ as usize },
        104usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_HFP_Ext),
        "::",
        stringify!(CurrDelta)
        )
    );
}

pub type HFP_Ext = Struct_HFP_Ext;

#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct Struct_MQ8 {
    pub change_no: u32,
    pub instrument_no: u16,
    pub reserved1: u16,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
    pub snap_no: u32,
    pub packet_no: u32,
    pub snap_millisec: u16,
    pub ip_len: u16,
    pub _bitfield_align_2: [u8; 0],
    pub _bitfield_2: __BindgenBitfieldUnit<[u8; 8usize]>,
    pub bid_price_list: [prc_lst_s; 5usize],
    pub reserved3: ::std::os::raw::c_uint,
    pub ask_price_list: [prc_lst_s; 5usize],
    pub reserved4: ::std::os::raw::c_uint,
    pub last_price: f64,
    pub turnover: f64,
    pub open_interest: f64,
    pub volume: u32,
    pub snap_time: u32,
    pub reserved5: [u8; 64usize],
}

#[test]
fn bindgen_test_layout_Struct_MQ8() {
    assert_eq!(
        ::std::mem::size_of::<Struct_MQ8>(),
        256usize,
        concat!("Size of: ", stringify!(Struct_MQ8))
    );
    assert_eq!(
        ::std::mem::align_of::<Struct_MQ8>(),
        1usize,
        concat!("Alignment of ", stringify!(Struct_MQ8))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).change_no as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(change_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).instrument_no as *const _ as usize },
        4usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(instrument_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).reserved1 as *const _ as usize },
        6usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(reserved1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).snap_no as *const _ as usize },
        12usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(snap_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).packet_no as *const _ as usize },
        16usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(packet_no)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).snap_millisec as *const _ as usize },
        20usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(snap_millisec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).ip_len as *const _ as usize },
        22usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(ip_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).bid_price_list as *const _ as usize },
        32usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(bid_price_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).reserved3 as *const _ as usize },
        92usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).ask_price_list as *const _ as usize },
        96usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(ask_price_list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).reserved4 as *const _ as usize },
        156usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(reserved4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).last_price as *const _ as usize },
        160usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(last_price)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).turnover as *const _ as usize },
        168usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(turnover)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).open_interest as *const _ as usize },
        176usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(open_interest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).volume as *const _ as usize },
        184usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(volume)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).snap_time as *const _ as usize },
        188usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(snap_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Struct_MQ8>())).reserved5 as *const _ as usize },
        192usize,
        concat!(
        "Offset of field: ",
        stringify!(Struct_MQ8),
        "::",
        stringify!(reserved5)
        )
    );
}

impl Default for Struct_MQ8 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

impl Struct_MQ8 {
    #[inline]
    pub fn port_num(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_port_num(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn ts_cnt(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_ts_cnt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(port_num: u32, ts_cnt: u32) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let port_num: u32 = unsafe { ::std::mem::transmute(port_num) };
            port_num as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let ts_cnt: u32 = unsafe { ::std::mem::transmute(ts_cnt) };
            ts_cnt as u64
        });
        __bindgen_bitfield_unit
    }
    #[inline]
    pub fn ts_cnt_fr(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(0usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_ts_cnt_fr(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(0usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved2(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(31usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_reserved2(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn bucket_id(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(32usize, 14u8) as u32) }
    }
    #[inline]
    pub fn set_bucket_id(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(32usize, 14u8, val as u64)
        }
    }
    #[inline]
    pub fn topic_id_idx(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(46usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_topic_id_idx(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(46usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn change_no_short(&self) -> u32 {
        unsafe { ::std::mem::transmute(self._bitfield_2.get(48usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_change_no_short(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_2.set(48usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_2(
        ts_cnt_fr: u32,
        reserved2: u32,
        bucket_id: u32,
        topic_id_idx: u32,
        change_no_short: u32,
    ) -> __BindgenBitfieldUnit<[u8; 8usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 8usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 31u8, {
            let ts_cnt_fr: u32 = unsafe { ::std::mem::transmute(ts_cnt_fr) };
            ts_cnt_fr as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let reserved2: u32 = unsafe { ::std::mem::transmute(reserved2) };
            reserved2 as u64
        });
        __bindgen_bitfield_unit.set(32usize, 14u8, {
            let bucket_id: u32 = unsafe { ::std::mem::transmute(bucket_id) };
            bucket_id as u64
        });
        __bindgen_bitfield_unit.set(46usize, 2u8, {
            let topic_id_idx: u32 = unsafe { ::std::mem::transmute(topic_id_idx) };
            topic_id_idx as u64
        });
        __bindgen_bitfield_unit.set(48usize, 16u8, {
            let change_no_short: u32 = unsafe { ::std::mem::transmute(change_no_short) };
            change_no_short as u64
        });
        __bindgen_bitfield_unit
    }
}

pub type MQ8 = Struct_MQ8;

#[repr(C, packed)]
#[derive(Copy, Clone)]
pub union Union_MQ_Dup {
    pub u32_: u32,
    pub mq: Union_MQ_Dup__bindgen_ty_1,
}

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct Union_MQ_Dup__bindgen_ty_1 {
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize]>,
    pub change_no: u16,
}

#[test]
fn bindgen_test_layout_Union_MQ_Dup__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<Union_MQ_Dup__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(Union_MQ_Dup__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Union_MQ_Dup__bindgen_ty_1>(),
        1usize,
        concat!("Alignment of ", stringify!(Union_MQ_Dup__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<Union_MQ_Dup__bindgen_ty_1>())).change_no as *const _ as usize
        },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(Union_MQ_Dup__bindgen_ty_1),
        "::",
        stringify!(change_no)
        )
    );
}

impl Union_MQ_Dup__bindgen_ty_1 {
    #[inline]
    pub fn bucket_id(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 13u8) as u16) }
    }
    #[inline]
    pub fn set_bucket_id(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 13u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved3(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set_reserved3(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn topic_id(&self) -> u16 {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set_topic_id(&mut self, val: u16) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        bucket_id: u16,
        reserved3: u16,
        topic_id: u16,
    ) -> __BindgenBitfieldUnit<[u8; 2usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 13u8, {
            let bucket_id: u16 = unsafe { ::std::mem::transmute(bucket_id) };
            bucket_id as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let reserved3: u16 = unsafe { ::std::mem::transmute(reserved3) };
            reserved3 as u64
        });
        __bindgen_bitfield_unit.set(14usize, 2u8, {
            let topic_id: u16 = unsafe { ::std::mem::transmute(topic_id) };
            topic_id as u64
        });
        __bindgen_bitfield_unit
    }
}

#[test]
fn bindgen_test_layout_Union_MQ_Dup() {
    assert_eq!(
        ::std::mem::size_of::<Union_MQ_Dup>(),
        4usize,
        concat!("Size of: ", stringify!(Union_MQ_Dup))
    );
    assert_eq!(
        ::std::mem::align_of::<Union_MQ_Dup>(),
        1usize,
        concat!("Alignment of ", stringify!(Union_MQ_Dup))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Union_MQ_Dup>())).u32_ as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(Union_MQ_Dup),
        "::",
        stringify!(u32_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Union_MQ_Dup>())).mq as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(Union_MQ_Dup),
        "::",
        stringify!(mq)
        )
    );
}

impl Default for Union_MQ_Dup {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}

pub type MQ_Dup = Union_MQ_Dup;

#[repr(C, packed)]
#[derive(Debug, Default, Copy, Clone)]
pub struct StatusExport {
    pub mdqp_inited: [bool; 2usize],
    pub mq_offset: u32,
}

#[test]
fn bindgen_test_layout_StatusExport() {
    assert_eq!(
        ::std::mem::size_of::<StatusExport>(),
        6usize,
        concat!("Size of: ", stringify!(StatusExport))
    );
    assert_eq!(
        ::std::mem::align_of::<StatusExport>(),
        1usize,
        concat!("Alignment of ", stringify!(StatusExport))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatusExport>())).mdqp_inited as *const _ as usize },
        0usize,
        concat!(
        "Offset of field: ",
        stringify!(StatusExport),
        "::",
        stringify!(mdqp_inited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<StatusExport>())).mq_offset as *const _ as usize },
        2usize,
        concat!(
        "Offset of field: ",
        stringify!(StatusExport),
        "::",
        stringify!(mq_offset)
        )
    );
}

extern "C" {
    pub static mut args: BoostArguments;
}

extern "C" {
    pub static mut status_export: *mut StatusExport;
}

extern "C" {
    #[link_name = "\u{1}_Z14read_mq_offsetv"]
    pub fn read_mq_offset() -> u32;
}

extern "C" {
    #[link_name = "\u{1}_Z14read_rx_offsetv"]
    pub fn read_rx_offset() -> u32;
}

extern "C" {
    #[link_name = "\u{1}_Z11read_ts_cntv"]
    pub fn read_ts_cnt() -> u32;
}

extern "C" {
    #[link_name = "\u{1}_Z14read_ts_cnt_frv"]
    pub fn read_ts_cnt_fr() -> u32;
}

extern "C" {
    #[link_name = "\u{1}_Z11get_mq_basev"]
    pub fn get_mq_base() -> *mut MQ8;
}

extern "C" {
    #[link_name = "\u{1}_Z7get_hfpii"]
    pub fn get_hfp(
        topic_idx: ::std::os::raw::c_int,
        instrument_no: ::std::os::raw::c_int,
    ) -> *mut mkt_snd_s;
}

extern "C" {
    #[link_name = "\u{1}_Z12get_hfp_basev"]
    pub fn get_hfp_base() -> *mut mkt_snd_s;
}

extern "C" {
    #[link_name = "\u{1}_Z16get_hfp_ext_basev"]
    pub fn get_hfp_ext_base() -> *mut HFP_Ext;
}

extern "C" {
    #[link_name = "\u{1}_Z15boost_mdqp_workb"]
    pub fn boost_mdqp_work(mq_stopped: bool);
}

extern "C" {
    #[link_name = "\u{1}_Z11boost_startPvP18struct_snap_marketi"]
    pub fn boost_start(
        arg: *mut ::std::os::raw::c_void,
        snap_markets: *mut snap_market_s,
        snap_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_Z21boost_init_ringbufferP12Union_MQ_DupP10Struct_MQ8"]
    pub fn boost_init_ringbuffer(mq_dup: *mut MQ_Dup, mq_base: *mut MQ8) -> u32;
}

extern "C" {
    #[link_name = "\u{1}_Z10boost_stopv"]
    pub fn boost_stop() -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_Z13subscribe_allv"]
    pub fn subscribe_all();
}

extern "C" {
    #[link_name = "\u{1}_Z15unsubscribe_allv"]
    pub fn unsubscribe_all();
}

extern "C" {
    #[link_name = "\u{1}_Z9subscribesj"]
    pub fn subscribe(topic_id: i16, instrument_no: u32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_Z11unsubscribesj"]
    pub fn unsubscribe(topic_id: i16, instrument_no: u32) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_Z9subscribePKc"]
    pub fn subscribe1(instrument_id: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_Z11unsubscribePKc"]
    pub fn unsubscribe1(instrument_id: *const ::std::os::raw::c_char) -> bool;
}

extern "C" {
    #[link_name = "\u{1}_Z11update_mdqpP18struct_snap_market"]
    pub fn update_mdqp(snap_market: *mut snap_market_s) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_Z15get_codec_priceijRdS_"]
    pub fn get_codec_price(
        topic_id: ::std::os::raw::c_int,
        instrument_no: u32,
        codec_price: *mut f64,
        price_t: *mut f64,
    ) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_Z14is_mdqp_initedt"]
    pub fn is_mdqp_inited(topic_id: u16) -> ::std::os::raw::c_int;
}

extern "C" {
    #[link_name = "\u{1}_Z8printHexPvi"]
    pub fn printHex(data: *mut ::std::os::raw::c_void, len: ::std::os::raw::c_int);
}

extern "C" {
    #[link_name = "\u{1}_Z22get_snaptime_with_baseP10Struct_MQ8j"]
    pub fn get_snaptime_with_base(mq_base: *mut MQ8, mq_offset: u32) -> u32;
}

extern "C" {
    #[link_name = "\u{1}_Z9as_mq_objP10Struct_MQ8j"]
    pub fn as_mq_obj(mq_base: *mut MQ8, mq_offset: u32) -> *mut MQ8;
}

extern "C" {
    #[link_name = "\u{1}_Z15init_boot_startv"]
    pub fn init_boot_start() -> [u8; 0usize];
}

extern "C" {
    #[link_name = "\u{1}_Z7init_okv"]
    pub fn init_ok();
}

extern "C" {
    #[link_name = "\u{1}_Z12parse_symbolP11market_sendj"]
    pub fn parse_symbol(hfp_base: *mut mkt_snd_s, bucket_id: u32) -> u64;
}

extern "C" {
    #[link_name = "\u{1}_Z18get_md_informationP11market_sendj"]
    pub fn get_md_information(hfp_base: *mut mkt_snd_s, bucket_id: u32) -> *mut mkt_snd_s;
}

extern "C" {
    #[link_name = "\u{1}_Z16get_mq_base_timeP10Struct_MQ8j"]
    pub fn get_mq_base_time(mq_base: *mut MQ8, mq_offset: u32) -> u32;
}
